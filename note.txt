docker exec -it vrc_mysql mysql -u vrcuser -p
SELECT * FROM vrc.Users;

docker-compose up -d

docker-compose down

node server.js

SELECT * FROM vrc.Children;

 SELECT table_name, column_name, data_type  FROM information_schema.columns  WHERE table_schema = 'vrc';

-------

types/UserTypes.ts:
export interface Child {
  child_name: string;
  age: number;
  education_level: number;
}

export interface DetailedChild extends Child {
  child_id : number;
  user_id : number;
  date_created : string;
}

export interface User {
  userId: number;
  username: string;
  email: string;
}

-------

hooks/useChildrenList.ts:
import { useContext } from "react";
import { ChildrenContext } from "../context/ChildrenContext";

export const useChildrenList = () => {
  const context = useContext(ChildrenContext);
  if (!context) {
    throw new Error('useChildrenList must be used within an ChildrenProvider');
  }
  return context;
};

---------

context/ChildrenContext.ts:
import { createContext } from 'react';
import { DetailedChild } from '../types/UserTypes';

interface ChildrenContextType {
  childrenList: DetailedChild[] | null;
  activeChild: DetailedChild | null;
  getChildrenList: () => void;
  setActiveChild: (child: DetailedChild) => void;
}

export const ChildrenContext = createContext<ChildrenContextType | undefined>(undefined);

context/ChildrenProvider.ts:
import { ReactNode, useEffect, useState } from "react";
import { DetailedChild } from "../types/UserTypes";
import { ChildrenContext } from "./ChildrenContext";
import ChildrenApi from "../api/ChildrenApi";

export const ChildrenProvider = ({ children }: { children: ReactNode }) => {
  const [childrenList, setChildrenList] = useState<DetailedChild[] | null>(null);
  const [activeChild, setActiveChild] = useState<DetailedChild | null>(null);

  useEffect(() => {
    getChildrenList();
  }, []);

  const getChildrenList = async () => {
    try {
      const response = await ChildrenApi.getChildrenByUserId();
      console.log(response);
      setChildrenList(response);
      if (activeChild === null) {
        setActiveChild(response[0]);
      }
    } catch {
      console.log("Failed to get children list");
    }
  }

  return (
    <ChildrenContext.Provider value={{ childrenList, getChildrenList, activeChild, setActiveChild }}>
      {children}
    </ChildrenContext.Provider>
  );
};

--------

content/AuthContext.ts:
import { createContext } from 'react';
import { User } from '../types/UserTypes';

interface AuthContextType {
  isAuthenticated: boolean;
  login: (user : User) => void;
  logout: () => void;
  user: User | null;
}

export const AuthContext = createContext<AuthContextType | undefined>(undefined);

context/AuthProvider.tsx:
import { ReactNode, useEffect, useState } from "react";
import { User } from "../types/UserTypes";
import { AuthContext } from "./AuthContext";

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    if (localStorage.getItem('user')) {
      setIsAuthenticated(true);
      setUser(JSON.parse(localStorage.getItem('user')!));
    }
  },[]);

  const login = (user : User) => { 
    setIsAuthenticated(true);
    setUser(user);
  };
  const logout = () => { 
    setIsAuthenticated(false)
    setUser(null);
    localStorage.removeItem('user');
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout, user }}>
      {children}
    </AuthContext.Provider>
  );
};

----------

hooks/useAuth.ts:
import { useContext } from "react";
import { AuthContext } from "../context/AuthContext";

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

----------

api/UserApi.ts:
import { Child } from "../types/UserTypes";

const BASE_URL = "http://localhost:8000/api/users";

const login = async (email: string, password: string) => {
  const response = await fetch(BASE_URL + "/login", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ email, password }),
  });

  if (!response.ok) {
    throw new Error("Login failed "+ response.statusText);
  }

  return response.json();
};

const signup = async (username: string, email: string, children: Child[], password: string) => {
  const response = await fetch(BASE_URL + "/signup", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ username, email, children, password }),
  });

  if (!response.ok) {
    throw new Error('Sign up failed ' + response.statusText);
  }

  return response.json();
}

export default {
  login,
  signup
};


----------