// services/llmService.js
const axios = require("axios");
const db = require("../db");
// questionService remains the same
const questionService = require("./questionService");
const {
  validateJSONResponse,
  validateQuestionStructure,
  validateRealWords,
} = require("../utils/llmValidator");

// NEW: import our YAML-based loader
const {
  getPromptByTopicAndDifficulty,
} = require("../llm_prompts/promptLoader");

async function generateQuestions(topic_id, difficulty_id, num_questions) {
  try {
    // 1. Look up topic name and difficulty label from DB
    const topic = await getTopicById(topic_id);
    const difficulty = await getDifficultyById(difficulty_id);

    // 2. Pull the actual prompt strings from prompts.yaml
    const { system_message, few_shot_examples, assignment } =
      getPromptByTopicAndDifficulty(topic, difficulty);

    const prompt = `
${system_message}

${few_shot_examples}

${assignment}
    `;

    // 3. Call the LLM
    const llmResponse = await callOpenAPI(prompt);

    // 4. Validate the response is JSON, parse it into an array
    const questions = validateJSONResponse(llmResponse);

    // 5. Validate each question
    const validQuestions = [];
    for (const question of questions) {
      if (!validateQuestionStructure(question)) {
        console.error("Invalid question structure:", question);
        continue;
      }

      // Validate the correct_answer has real words
      if (!(await validateRealWords(question.correct_answer))) {
        console.error(
          "Hallucinated word detected in: ",
          question.correct_answer
        );
        continue;
      }

      // Mark these as LLM-generated
      question.topic_id = topic_id;
      question.difficulty_id = difficulty_id;
      question.is_LLM_generated = true;
      validQuestions.push(question);
    }

    if (validQuestions.length === 0) {
      throw new Error("No valid questions generated by LLM");
    }

    // 6. Insert the validated questions in bulk
    const result = await questionService.createQuestionsBulk(validQuestions);
    return result;
  } catch (error) {
    console.error("Error in generateQuestions:", error.message);
    throw error;
  }
}

async function callOpenAPI(prompt) {
  try {
    // Example code calling OpenAI (commented out):
    //
    // const response = await axios.post(
    //   "https://api.openai.com/v1/completions",
    //   {
    //     model: "gpt-4",
    //     prompt,
    //     max_tokens: 1000,
    //     temperature: 0.7,
    //   },
    //   {
    //     headers: {
    //       Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
    //       "Content-Type": "application/json",
    //     },
    //   }
    // );
    // const llmResponse = response.data.choices[0].text.trim();
    // return llmResponse;

    const response = {
      data: {
        choices: [
          {
            // A sample JSON array string
            text: `[
              {
                "question_text": "What is the capital of France?",
                "answer_format": "multiple_choice",
                "correct_answer": "Paris",
                "explanation": "Paris is the capital of France",
                "distractors": ["London", "Berlin", "Madrid"]
              },
              {
                "question_text": "What is 2 + 2?",
                "answer_format": "multiple_choice",
                "correct_answer": "4",
                "explanation": "2 + 2 = 4",
                "distractors": ["3", "5", "6"]
              }
            ]`,
          },
        ],
      },
    };
    return response.data.choices[0].text.trim();
  } catch (error) {
    console.error("Error in callOpenAPI:", error.message);
    throw new Error("Failed to call OpenAI API");
  }
}

async function getTopicById(topic_id) {
  const [rows] = await db.execute(
    "SELECT topic_name FROM Topics WHERE topic_id = ?",
    [topic_id]
  );
  if (rows.length === 0) {
    throw new Error("Invalid topic_id");
  }
  const topic = rows[0].topic_name.trim().replaceAll(" ", "_");
  return topic.toLowerCase();
}

async function getDifficultyById(difficulty_id) {
  const [rows] = await db.execute(
    "SELECT label FROM Difficulty_Levels WHERE difficulty_id = ?",
    [difficulty_id]
  );
  if (rows.length === 0) {
    throw new Error("Invalid difficulty_id");
  }
  const difficulty = rows[0].label.trim().toLowerCase();
  return difficulty;
}

module.exports = {
  generateQuestions,
};
